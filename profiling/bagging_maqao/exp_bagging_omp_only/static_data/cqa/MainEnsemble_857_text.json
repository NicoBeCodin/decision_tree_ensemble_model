{
  "_cqa_text_report":
    {
      "_objects":
        {
          "image_vec_align":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/vec_align.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x64_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x64_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x32_128":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x32_128.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_4x32_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/4x32_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x64_128":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x64_128.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_2x64_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/2x64_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_4x32_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/4x32_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_8x32_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/8x32_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x32_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x32_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_2x64_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/2x64_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x32_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x32_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x64_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x64_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_4x64_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/4x64_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_row_maj":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/row_maj.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_col_maj":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/col_maj.svg",
              "size":
                {
                  "x": 500
                }
            },
          "list_path_1_vec_align_1":
            {
              "dynamic": true,
              "initial": "closed",
              "type": "list",
              "lines":
                [

                ],
              "header": ""
            }
        },
      "AVG":
        {
          "hint":
            [
              {
                "workaround": " - Try to reorganize arrays of structures to structures of arrays\n - Consider to permute loops (see vectorization gain report)\n - Try to remove indirect accesses. If applicable, precompute elements out of the innermost loop.\n",
                "details": " - Constant non-unit stride: 2 occurrence(s)\n - Irregular (variable stride) or indirect: 1 occurrence(s)\nNon-unit stride (uncontiguous) accesses are not efficiently using data caches\n",
                "title": "Slow data structures access",
                "txt": "Detected data structures (typically arrays) that cannot be efficiently read/written"
              },
              {
                "workaround": " - Pass to your compiler a micro-architecture specialization option:\n  * Please look into your compiler manual for march=native or equivalent\n - Use vector aligned instructions:\n  1) align your arrays on 32 bytes boundaries\n  2) inform your compiler that your arrays are vector aligned: read your compiler manual.\n<<image_vec_align>>",
                "details": " - VINSERTF128: 4 occurrences<<list_path_1_vec_align_1>>\n",
                "title": "Vector unaligned load/store instructions",
                "txt": "Detected 4 suboptimal vector unaligned load/store instructions.\n"
              },
              {
                "title": "Type of elements and instruction set",
                "txt": "4 AVX instructions are processing arithmetic or math operations on double precision FP elements in vector mode (four at a time).\n"
              },
              {
                "title": "Matching between your loop (in the source code) and the binary loop",
                "txt": "The binary loop is composed of 16 FP arithmetical operations:\n - 16: addition or subtraction\nThe binary loop is loading 192 bytes (24 double precision FP elements)."
              },
              {
                "title": "Arithmetic intensity",
                "txt": "Arithmetic intensity is 0.08 FP operations per loaded or stored byte."
              }
            ],
          "expert":
            [
              {
                "title": "General properties",
                "txt": "nb instructions    : 43\nnb uops            : 42\nloop length        : 211\nused x86 registers : 7\nused mmx registers : 0\nused xmm registers : 12\nused ymm registers : 12\nused zmm registers : 0\nnb stack references: 0\n"
              },
              {
                "title": "Front-end",
                "txt": "ASSUMED MACRO FUSION\nFIT IN UOP CACHE\nmicro-operation queue: 7.00 cycles\nfront end            : 7.00 cycles\n"
              },
              {
                "title": "Back-end",
                "txt": "       | ALU0/BRU0 | ALU1 | ALU2 | ALU3/BRU1 | AGU0  | AGU1  | AGU2 | FP0  | FP1  | FP2  | FP3\n-----------------------------------------------------------------------------------------------\nuops   | 4.50      | 4.50 | 4.50 | 4.50      | 16.00 | 16.00 | 0.00 | 4.00 | 4.00 | 4.00 | 4.00\ncycles | 4.50      | 4.50 | 4.50 | 4.50      | 16.00 | 16.00 | 0.00 | 4.00 | 4.00 | 4.00 | 4.00\n\nExecution ports to units layout:\n - ALU0/BRU0: ALU, BRU\n - ALU1: ALU\n - ALU2: ALU\n - ALU3/BRU1: ALU, BRU\n - AGU0 (256 bits): store address, load\n - AGU1 (256 bits): store address, load\n - AGU2: store address\n - FP0 (256 bits): VPU\n - FP1 (256 bits): VPU\n - FP2 (256 bits): VPU, FP store data\n - FP3 (256 bits): VPU, DIV/SQRT\n\nCycles executing div or sqrt instructions: NA\nCycles loading/storing data              : 16.00\nLongest recurrence chain latency (RecMII): 6.00\n"
              },
              {
                "title": "Cycles summary",
                "txt": "Front-end : 7.00\nDispatch  : 16.00\nData deps.: 6.00\nOverall L1: 16.00\n"
              },
              {
                "title": "Vectorization ratios",
                "txt": "all     : 33%\nload    : 0%\nstore   : NA (no store vectorizable/vectorized instructions)\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : 100%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 100%\n"
              },
              {
                "title": "Vector efficiency ratios",
                "txt": "all     : 41%\nload    : 25%\nstore   : NA (no store vectorizable/vectorized instructions)\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : 100%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 50%\n"
              },
              {
                "title": "Cycles and memory resources usage",
                "txt": "Assuming all data fit into the L1 cache, each iteration of the binary loop takes 16.00 cycles. At this rate:\n - 18% of peak load performance is reached (12.00 out of 64.00 bytes loaded per cycle (GB/s @ 1GHz))\n"
              },
              {
                "title": "Front-end bottlenecks",
                "txt": "Found no such bottlenecks."
              },
              {
                "title": "ASM code",
                "txt": "In the binary file, the address of the loop is: 8d470\n\nInstruction                                                                         | Nb FU | ALU0/BRU0 | ALU1 | ALU2 | ALU3/BRU1 | AGU0 | AGU1 | AGU2 | FP0  | FP1  | FP2  | FP3  | Latency | Recip. throughput | Vectorization\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nMOVSXD (%RCX),%R12                                                                  | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | N/A\nMOVSXD 0x8(%RCX),%R14                                                               | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | N/A\nADD $0x40,%RCX                                                                      | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25              | N/A\nMOVSXD -0x3c(%RCX),%RBX                                                             | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | N/A\nMOVSXD -0x34(%RCX),%R13                                                             | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | N/A\nVMOVSD (%RAX,%R14,8),%XMM5                                                          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | scal (25.0%)\nVMOVSD (%RAX,%R12,8),%XMM0                                                          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | scal (25.0%)\nMOVSXD -0x28(%RCX),%R14                                                             | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | N/A\nMOVSXD -0x30(%RCX),%R12                                                             | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | N/A\nVMOVSD (%RAX,%R14,8),%XMM2                                                          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | scal (25.0%)\nVMOVSD (%RAX,%R12,8),%XMM8                                                          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | scal (25.0%)\nMOVSXD -0x18(%RCX),%R14                                                             | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | N/A\nMOVSXD -0x20(%RCX),%R12                                                             | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | N/A\nVMOVHPD (%RAX,%R13,8),%XMM5,%XMM1                                                   | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0.50 | 0.50 | 0    | 1       | 0.50              | scal (25.0%)\nVMOVHPD (%RAX,%RBX,8),%XMM0,%XMM3                                                   | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0.50 | 0.50 | 0    | 1       | 0.50              | scal (25.0%)\nMOVSXD -0x24(%RCX),%R13                                                             | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | N/A\nMOVSXD -0x2c(%RCX),%RBX                                                             | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | N/A\nVINSERTF128 $0x1,%XMM1,%YMM3,%YMM4                                                  | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0.33 | 0.33 | 0    | 0.33 | 2       | 0.33              | vect (50.0%)\nVMOVSD (%RAX,%R14,8),%XMM13                                                         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | scal (25.0%)\nMOVSXD -0x8(%RCX),%R14                                                              | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | N/A\nVMOVHPD (%RAX,%R13,8),%XMM2,%XMM6                                                   | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0.50 | 0.50 | 0    | 1       | 0.50              | scal (25.0%)\nVMOVHPD (%RAX,%RBX,8),%XMM8,%XMM9                                                   | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0.50 | 0.50 | 0    | 1       | 0.50              | scal (25.0%)\nMOVSXD -0x14(%RCX),%R13                                                             | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | N/A\nMOVSXD -0x1c(%RCX),%RBX                                                             | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | N/A\nVINSERTF128 $0x1,%XMM6,%YMM9,%YMM10                                                 | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0.33 | 0.33 | 0    | 0.33 | 2       | 0.33              | vect (50.0%)\nVMOVSD (%RAX,%R14,8),%XMM0                                                          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | scal (25.0%)\nVADDPD %YMM10,%YMM4,%YMM11                                                          | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 3       | 0.50              | vect (100.0%)\nVADDPD %YMM11,%YMM15,%YMM12                                                         | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 3       | 0.50              | vect (100.0%)\nVMOVSD (%RAX,%R12,8),%XMM15                                                         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | scal (25.0%)\nMOVSXD -0x10(%RCX),%R12                                                             | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | N/A\nVMOVHPD (%RAX,%R13,8),%XMM13,%XMM14                                                 | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0.50 | 0.50 | 0    | 1       | 0.50              | scal (25.0%)\nMOVSXD -0x4(%RCX),%R13                                                              | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | N/A\nVMOVSD (%RAX,%R12,8),%XMM4                                                          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | scal (25.0%)\nVMOVHPD (%RAX,%R13,8),%XMM0,%XMM3                                                   | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0.50 | 0.50 | 0    | 1       | 0.50              | scal (25.0%)\nVMOVHPD (%RAX,%RBX,8),%XMM15,%XMM5                                                  | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0.50 | 0.50 | 0    | 1       | 0.50              | scal (25.0%)\nMOVSXD -0xc(%RCX),%RBX                                                              | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | N/A\nVINSERTF128 $0x1,%XMM14,%YMM5,%YMM1                                                 | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0.33 | 0.33 | 0    | 0.33 | 2       | 0.33              | vect (50.0%)\nVMOVHPD (%RAX,%RBX,8),%XMM4,%XMM2                                                   | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0.50 | 0.50 | 0    | 1       | 0.50              | scal (25.0%)\nVINSERTF128 $0x1,%XMM3,%YMM2,%YMM6                                                  | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0.33 | 0.33 | 0    | 0.33 | 2       | 0.33              | vect (50.0%)\nVADDPD %YMM6,%YMM1,%YMM8                                                            | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 3       | 0.50              | vect (100.0%)\nVADDPD %YMM8,%YMM12,%YMM15                                                          | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 3       | 0.50              | vect (100.0%)\nCMP %RCX,%R11                                                                       | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25              | N/A\nJNE 8d470 <_ZN4Math23calculateMSEWithIndicesERKSt6vectorIdSaIdEERKS0_IiSaIiEE+0xe0> | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | N/A\n"
              }
            ],
          "header":
            [
            "4% of peak computational performance is used (1.00 out of 24.00 FLOP per cycle (GFLOPS @ 1GHz))"
            ],
          "brief":
            [

            ],
          "gain":
            [
              {
                "workaround": " - Try another compiler or update/tune your current one\n - Remove inter-iterations dependences from your loop and make it unit-stride:\n  * If your arrays have 2 or more dimensions, check whether elements are accessed contiguously and, otherwise, try to permute loops accordingly\n  * If your loop streams arrays of structures (AoS), try to use structures of arrays instead (SoA)\n",
                "details": "33% of SSE/AVX instructions are used in vector version (process two or more data elements in vector registers):\n - 0% of SSE/AVX loads are used in vector version.\nSince your execution units are vector units, only a fully vectorized loop can use their full power.\n",
                "title": "Vectorization",
                "txt": "Your loop is poorly vectorized.\nOnly 41% of vector register length is used (average across all SSE/AVX instructions).\nBy fully vectorizing your loop, you can lower the cost of an iteration from 16.00 to 10.00 cycles (1.60x speedup)."
              },
              {
                "workaround": " - Read less array elements\n - Provide more information to your compiler:\n  * hardcode the bounds of the corresponding 'for' loop\n",
                "title": "Execution units bottlenecks",
                "txt": "Performance is limited by reading data from caches/RAM (load units are a bottleneck).\n\nBy removing all these bottlenecks, you can lower the cost of an iteration from 16.00 to 7.00 cycles (2.29x speedup).\n"
              }
            ],
          "potential":
            [

            ]
        },
      "paths":
        [
          {
            "hint":
              [
                {
                  "workaround": " - Try to reorganize arrays of structures to structures of arrays\n - Consider to permute loops (see vectorization gain report)\n - Try to remove indirect accesses. If applicable, precompute elements out of the innermost loop.\n",
                  "details": " - Constant non-unit stride: 2 occurrence(s)\n - Irregular (variable stride) or indirect: 1 occurrence(s)\nNon-unit stride (uncontiguous) accesses are not efficiently using data caches\n",
                  "title": "Slow data structures access",
                  "txt": "Detected data structures (typically arrays) that cannot be efficiently read/written"
                },
                {
                  "workaround": " - Pass to your compiler a micro-architecture specialization option:\n  * Please look into your compiler manual for march=native or equivalent\n - Use vector aligned instructions:\n  1) align your arrays on 32 bytes boundaries\n  2) inform your compiler that your arrays are vector aligned: read your compiler manual.\n<<image_vec_align>>",
                  "details": " - VINSERTF128: 4 occurrences<<list_path_1_vec_align_1>>\n",
                  "title": "Vector unaligned load/store instructions",
                  "txt": "Detected 4 suboptimal vector unaligned load/store instructions.\n"
                },
                {
                  "title": "Type of elements and instruction set",
                  "txt": "4 AVX instructions are processing arithmetic or math operations on double precision FP elements in vector mode (four at a time).\n"
                },
                {
                  "title": "Matching between your loop (in the source code) and the binary loop",
                  "txt": "The binary loop is composed of 16 FP arithmetical operations:\n - 16: addition or subtraction\nThe binary loop is loading 192 bytes (24 double precision FP elements)."
                },
                {
                  "title": "Arithmetic intensity",
                  "txt": "Arithmetic intensity is 0.08 FP operations per loaded or stored byte."
                }
              ],
            "expert":
              [
                {
                  "title": "General properties",
                  "txt": "nb instructions    : 43\nnb uops            : 42\nloop length        : 211\nused x86 registers : 7\nused mmx registers : 0\nused xmm registers : 12\nused ymm registers : 12\nused zmm registers : 0\nnb stack references: 0\n"
                },
                {
                  "title": "Front-end",
                  "txt": "ASSUMED MACRO FUSION\nFIT IN UOP CACHE\nmicro-operation queue: 7.00 cycles\nfront end            : 7.00 cycles\n"
                },
                {
                  "title": "Back-end",
                  "txt": "       | ALU0/BRU0 | ALU1 | ALU2 | ALU3/BRU1 | AGU0  | AGU1  | AGU2 | FP0  | FP1  | FP2  | FP3\n-----------------------------------------------------------------------------------------------\nuops   | 4.50      | 4.50 | 4.50 | 4.50      | 16.00 | 16.00 | 0.00 | 4.00 | 4.00 | 4.00 | 4.00\ncycles | 4.50      | 4.50 | 4.50 | 4.50      | 16.00 | 16.00 | 0.00 | 4.00 | 4.00 | 4.00 | 4.00\n\nExecution ports to units layout:\n - ALU0/BRU0: ALU, BRU\n - ALU1: ALU\n - ALU2: ALU\n - ALU3/BRU1: ALU, BRU\n - AGU0 (256 bits): store address, load\n - AGU1 (256 bits): store address, load\n - AGU2: store address\n - FP0 (256 bits): VPU\n - FP1 (256 bits): VPU\n - FP2 (256 bits): VPU, FP store data\n - FP3 (256 bits): VPU, DIV/SQRT\n\nCycles executing div or sqrt instructions: NA\nCycles loading/storing data              : 16.00\nLongest recurrence chain latency (RecMII): 6.00\n"
                },
                {
                  "title": "Cycles summary",
                  "txt": "Front-end : 7.00\nDispatch  : 16.00\nData deps.: 6.00\nOverall L1: 16.00\n"
                },
                {
                  "title": "Vectorization ratios",
                  "txt": "all     : 33%\nload    : 0%\nstore   : NA (no store vectorizable/vectorized instructions)\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : 100%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 100%\n"
                },
                {
                  "title": "Vector efficiency ratios",
                  "txt": "all     : 41%\nload    : 25%\nstore   : NA (no store vectorizable/vectorized instructions)\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : 100%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 50%\n"
                },
                {
                  "title": "Cycles and memory resources usage",
                  "txt": "Assuming all data fit into the L1 cache, each iteration of the binary loop takes 16.00 cycles. At this rate:\n - 18% of peak load performance is reached (12.00 out of 64.00 bytes loaded per cycle (GB/s @ 1GHz))\n"
                },
                {
                  "title": "Front-end bottlenecks",
                  "txt": "Found no such bottlenecks."
                },
                {
                  "title": "ASM code",
                  "txt": "In the binary file, the address of the loop is: 8d470\n\nInstruction                                                                         | Nb FU | ALU0/BRU0 | ALU1 | ALU2 | ALU3/BRU1 | AGU0 | AGU1 | AGU2 | FP0  | FP1  | FP2  | FP3  | Latency | Recip. throughput | Vectorization\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nMOVSXD (%RCX),%R12                                                                  | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | N/A\nMOVSXD 0x8(%RCX),%R14                                                               | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | N/A\nADD $0x40,%RCX                                                                      | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25              | N/A\nMOVSXD -0x3c(%RCX),%RBX                                                             | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | N/A\nMOVSXD -0x34(%RCX),%R13                                                             | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | N/A\nVMOVSD (%RAX,%R14,8),%XMM5                                                          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | scal (25.0%)\nVMOVSD (%RAX,%R12,8),%XMM0                                                          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | scal (25.0%)\nMOVSXD -0x28(%RCX),%R14                                                             | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | N/A\nMOVSXD -0x30(%RCX),%R12                                                             | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | N/A\nVMOVSD (%RAX,%R14,8),%XMM2                                                          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | scal (25.0%)\nVMOVSD (%RAX,%R12,8),%XMM8                                                          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | scal (25.0%)\nMOVSXD -0x18(%RCX),%R14                                                             | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | N/A\nMOVSXD -0x20(%RCX),%R12                                                             | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | N/A\nVMOVHPD (%RAX,%R13,8),%XMM5,%XMM1                                                   | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0.50 | 0.50 | 0    | 1       | 0.50              | scal (25.0%)\nVMOVHPD (%RAX,%RBX,8),%XMM0,%XMM3                                                   | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0.50 | 0.50 | 0    | 1       | 0.50              | scal (25.0%)\nMOVSXD -0x24(%RCX),%R13                                                             | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | N/A\nMOVSXD -0x2c(%RCX),%RBX                                                             | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | N/A\nVINSERTF128 $0x1,%XMM1,%YMM3,%YMM4                                                  | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0.33 | 0.33 | 0    | 0.33 | 2       | 0.33              | vect (50.0%)\nVMOVSD (%RAX,%R14,8),%XMM13                                                         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | scal (25.0%)\nMOVSXD -0x8(%RCX),%R14                                                              | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | N/A\nVMOVHPD (%RAX,%R13,8),%XMM2,%XMM6                                                   | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0.50 | 0.50 | 0    | 1       | 0.50              | scal (25.0%)\nVMOVHPD (%RAX,%RBX,8),%XMM8,%XMM9                                                   | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0.50 | 0.50 | 0    | 1       | 0.50              | scal (25.0%)\nMOVSXD -0x14(%RCX),%R13                                                             | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | N/A\nMOVSXD -0x1c(%RCX),%RBX                                                             | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | N/A\nVINSERTF128 $0x1,%XMM6,%YMM9,%YMM10                                                 | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0.33 | 0.33 | 0    | 0.33 | 2       | 0.33              | vect (50.0%)\nVMOVSD (%RAX,%R14,8),%XMM0                                                          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | scal (25.0%)\nVADDPD %YMM10,%YMM4,%YMM11                                                          | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 3       | 0.50              | vect (100.0%)\nVADDPD %YMM11,%YMM15,%YMM12                                                         | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 3       | 0.50              | vect (100.0%)\nVMOVSD (%RAX,%R12,8),%XMM15                                                         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | scal (25.0%)\nMOVSXD -0x10(%RCX),%R12                                                             | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | N/A\nVMOVHPD (%RAX,%R13,8),%XMM13,%XMM14                                                 | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0.50 | 0.50 | 0    | 1       | 0.50              | scal (25.0%)\nMOVSXD -0x4(%RCX),%R13                                                              | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | N/A\nVMOVSD (%RAX,%R12,8),%XMM4                                                          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | scal (25.0%)\nVMOVHPD (%RAX,%R13,8),%XMM0,%XMM3                                                   | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0.50 | 0.50 | 0    | 1       | 0.50              | scal (25.0%)\nVMOVHPD (%RAX,%RBX,8),%XMM15,%XMM5                                                  | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0.50 | 0.50 | 0    | 1       | 0.50              | scal (25.0%)\nMOVSXD -0xc(%RCX),%RBX                                                              | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | N/A\nVINSERTF128 $0x1,%XMM14,%YMM5,%YMM1                                                 | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0.33 | 0.33 | 0    | 0.33 | 2       | 0.33              | vect (50.0%)\nVMOVHPD (%RAX,%RBX,8),%XMM4,%XMM2                                                   | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0.50 | 0.50 | 0    | 1       | 0.50              | scal (25.0%)\nVINSERTF128 $0x1,%XMM3,%YMM2,%YMM6                                                  | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0.33 | 0.33 | 0    | 0.33 | 2       | 0.33              | vect (50.0%)\nVADDPD %YMM6,%YMM1,%YMM8                                                            | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 3       | 0.50              | vect (100.0%)\nVADDPD %YMM8,%YMM12,%YMM15                                                          | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 3       | 0.50              | vect (100.0%)\nCMP %RCX,%R11                                                                       | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25              | N/A\nJNE 8d470 <_ZN4Math23calculateMSEWithIndicesERKSt6vectorIdSaIdEERKS0_IiSaIiEE+0xe0> | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | N/A\n"
                }
              ],
            "header":
              [
              "4% of peak computational performance is used (1.00 out of 24.00 FLOP per cycle (GFLOPS @ 1GHz))"
              ],
            "brief":
              [

              ],
            "gain":
              [
                {
                  "workaround": " - Try another compiler or update/tune your current one\n - Remove inter-iterations dependences from your loop and make it unit-stride:\n  * If your arrays have 2 or more dimensions, check whether elements are accessed contiguously and, otherwise, try to permute loops accordingly\n  * If your loop streams arrays of structures (AoS), try to use structures of arrays instead (SoA)\n",
                  "details": "33% of SSE/AVX instructions are used in vector version (process two or more data elements in vector registers):\n - 0% of SSE/AVX loads are used in vector version.\nSince your execution units are vector units, only a fully vectorized loop can use their full power.\n",
                  "title": "Vectorization",
                  "txt": "Your loop is poorly vectorized.\nOnly 41% of vector register length is used (average across all SSE/AVX instructions).\nBy fully vectorizing your loop, you can lower the cost of an iteration from 16.00 to 10.00 cycles (1.60x speedup)."
                },
                {
                  "workaround": " - Read less array elements\n - Provide more information to your compiler:\n  * hardcode the bounds of the corresponding 'for' loop\n",
                  "title": "Execution units bottlenecks",
                  "txt": "Performance is limited by reading data from caches/RAM (load units are a bottleneck).\n\nBy removing all these bottlenecks, you can lower the cost of an iteration from 16.00 to 7.00 cycles (2.29x speedup).\n"
                }
              ],
            "potential":
              [

              ]
          }
        ],
      "common":
        {
          "header":
            [
            ""
            ],
          "nb_paths": 1
        }
    }
}
