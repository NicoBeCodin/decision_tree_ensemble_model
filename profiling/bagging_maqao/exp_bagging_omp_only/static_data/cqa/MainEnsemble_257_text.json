{
  "_cqa_text_report":
    {
      "_objects":
        {
          "image_col_maj":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/col_maj.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_4x32_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/4x32_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x64_128":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x64_128.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_4x32_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/4x32_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_8x32_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/8x32_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x32_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x32_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_4x64_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/4x64_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x64_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x64_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_vec_align":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/vec_align.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x64_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x64_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x32_128":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x32_128.svg",
              "size":
                {
                  "x": 500
                }
            },
          "list_path_1_complex_1":
            {
              "dynamic": true,
              "initial": "closed",
              "type": "list",
              "lines":
                [

                ],
              "header": ""
            },
          "list_path_1_call_1":
            {
              "dynamic": true,
              "initial": "closed",
              "type": "list",
              "lines":
                [

                ],
              "header": ""
            },
          "image_2x64_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/2x64_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_row_maj":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/row_maj.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x32_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x32_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_2x64_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/2x64_512.svg",
              "size":
                {
                  "x": 500
                }
            }
        },
      "AVG":
        {
          "hint":
            [
              {
                "details": "Calling (and then returning from) a function prevents many compiler optimizations (like vectorization), breaks control flow (which reduces pipeline performance) and executes extra instructions to save/restore the registers used inside it, which is very expensive (dozens of cycles). Consider to inline small functions.\n - unknown: 6 occurrences<<list_path_1_call_1>>\n",
                "title": "CALL instructions",
                "txt": "Detected function call instructions.\n"
              },
              {
                "details": "These instructions generate more than one micro-operation and only one of them can be decoded during a cycle and the extra micro-operations increase pressure on execution units.\n - JMP: 6 occurrences<<list_path_1_complex_1>>\n",
                "title": "Complex instructions",
                "txt": "Detected COMPLEX INSTRUCTIONS.\n"
              },
              {
                "title": "Type of elements and instruction set",
                "txt": "No instructions are processing arithmetic or math operations on FP elements. This loop is probably writing/copying data or processing integer elements."
              },
              {
                "title": "Matching between your loop (in the source code) and the binary loop",
                "txt": "The binary loop does not contain any FP arithmetical operations.\nThe binary loop is loading 153 bytes.\nThe binary loop is storing 104 bytes."
              }
            ],
          "expert":
            [
              {
                "title": "General properties",
                "txt": "nb instructions    : 94\nnb uops            : 154\nloop length        : 507\nused x86 registers : 13\nused mmx registers : 0\nused xmm registers : 5\nused ymm registers : 0\nused zmm registers : 0\nnb stack references: 8\n"
              },
              {
                "title": "Front-end",
                "txt": "MACRO FUSION NOT POSSIBLE\nFIT IN UOP CACHE\nmicro-operation queue: 25.67 cycles\nfront end            : 25.67 cycles\n"
              },
              {
                "title": "Back-end",
                "txt": "       | ALU0/BRU0 | ALU1  | ALU2  | ALU3/BRU1 | AGU0  | AGU1  | AGU2  | FP0  | FP1  | FP2  | FP3\n--------------------------------------------------------------------------------------------------\nuops   | 18.75     | 18.75 | 18.75 | 18.75     | 13.00 | 13.00 | 11.00 | 0.00 | 1.00 | 6.00 | 0.00\ncycles | 18.75     | 18.75 | 18.75 | 18.75     | 13.00 | 13.00 | 11.00 | 0.00 | 1.00 | 6.00 | 0.00\n\nExecution ports to units layout:\n - ALU0/BRU0: ALU, BRU\n - ALU1: ALU\n - ALU2: ALU\n - ALU3/BRU1: ALU, BRU\n - AGU0 (256 bits): store address, load\n - AGU1 (256 bits): store address, load\n - AGU2: store address\n - FP0 (256 bits): VPU\n - FP1 (256 bits): VPU\n - FP2 (256 bits): VPU, FP store data\n - FP3 (256 bits): VPU, DIV/SQRT\n\nCycles executing div or sqrt instructions: NA\nCycles loading/storing data              : 11.00\n"
              },
              {
                "title": "Cycles summary",
                "txt": "Front-end : 25.67\nDispatch  : 18.75\nOverall L1: 25.67\n"
              },
              {
                "title": "Vectorization ratios",
                "txt": "INT\nall    : 16%\nload   : 22%\nstore  : 37%\nmul    : NA (no mul vectorizable/vectorized instructions)\nadd-sub: NA (no add-sub vectorizable/vectorized instructions)\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 0%\nFP\nall     : 0%\nload    : 0%\nstore   : 0%\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : NA (no other vectorizable/vectorized instructions)\nINT+FP\nall     : 13%\nload    : 18%\nstore   : 27%\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 0%\n"
              },
              {
                "title": "Vector efficiency ratios",
                "txt": "INT\nall    : 25%\nload   : 26%\nstore  : 31%\nmul    : NA (no mul vectorizable/vectorized instructions)\nadd-sub: NA (no add-sub vectorizable/vectorized instructions)\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 21%\nFP\nall     : 25%\nload    : 25%\nstore   : 25%\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : NA (no other vectorizable/vectorized instructions)\nINT+FP\nall     : 25%\nload    : 26%\nstore   : 29%\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 21%\n"
              },
              {
                "title": "Cycles and memory resources usage",
                "txt": "Assuming all data fit into the L1 cache, each iteration of the binary loop takes 25.67 cycles. At this rate:\n - 9% of peak load performance is reached (5.96 out of 64.00 bytes loaded per cycle (GB/s @ 1GHz))\n - 12% of peak store performance is reached (4.05 out of 32.00 bytes stored per cycle (GB/s @ 1GHz))\n"
              },
              {
                "title": "Front-end bottlenecks",
                "txt": "Performance is limited by instruction throughput (loading/decoding program instructions to execution core) (front-end is a bottleneck).\n\nBy removing all these bottlenecks, you can lower the cost of an iteration from 25.67 to 18.75 cycles (1.37x speedup).\n"
              },
              {
                "title": "ASM code",
                "txt": "In the binary file, the address of the loop is: 34060\n\nInstruction                                                                                   | Nb FU | ALU0/BRU0 | ALU1 | ALU2 | ALU3/BRU1 | AGU0 | AGU1 | AGU2 | FP0 | FP1  | FP2  | FP3 | Latency | Recip. throughput | Vectorization\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nMOV $0x2c,%EDX                                                                                | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.25              | scal (12.5%)\nMOV %R14,%RDI                                                                                 | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0       | 0.25              | N/A\nMOV 0x98(%RSP),%RSI                                                                           | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0    | 0    | 0   | 3       | 0.50              | N/A\nCALL e3b0 <.plt.sec@start+0x1100>                                                             | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0   | 0    | 0    | 0   | 0       | 1                 | N/A\nMOV (%RAX),%RSI                                                                               | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0    | 0    | 0   | 3       | 0.50              | N/A\nMOV -0x18(%RSI),%R8                                                                           | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0    | 0    | 0   | 3       | 0.50              | N/A\nTESTB $0x5,0x20(%RAX,%R8,1)                                                                   | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0.50 | 0.50 | 0    | 0   | 0    | 0    | 0   | 1       | 0.50              | scal (3.1%)\nJNE 341d0 <_ZN6DataIO7readCSVERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERi+0x610> | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.50              | N/A\nMOV 0x140(%RSP),%R12                                                                          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0    | 0    | 0   | 3       | 0.50              | scal (25.0%)\nCALL d2d0 <.plt.sec@start+0x20>                                                               | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0   | 0    | 0    | 0   | 0       | 1                 | N/A\nLEA 0xb8(%RSP),%RSI                                                                           | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.25              | N/A\nMOV (%RAX),%R13D                                                                              | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0    | 0    | 0   | 3       | 0.50              | N/A\nMOVL $0,(%RAX)                                                                                | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 4       | 1                 | scal (12.5%)\nMOV %RAX,%RBX                                                                                 | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0       | 0.25              | N/A\nMOV %R12,%RDI                                                                                 | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0       | 0.25              | N/A\nCALL d2a0 <.plt.got@start+0x10>                                                               | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0   | 0    | 0    | 0   | 0       | 1                 | N/A\nVMOVSD %XMM0,0xa0(%RSP)                                                                       | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0   | 0    | 1    | 0   | 1       | 1                 | scal (25.0%)\nCMP 0xb8(%RSP),%R12                                                                           | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0.50 | 0.50 | 0    | 0   | 0    | 0    | 0   | 1       | 0.50              | scal (25.0%)\nJE 34cd6 <_ZN6DataIO7readCSVERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERi+0x1116> | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.50              | N/A\nMOV (%RBX),%R11D                                                                              | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0    | 0    | 0   | 3       | 0.50              | scal (12.5%)\nCMP $0x22,%R11D                                                                               | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.25              | scal (12.5%)\nJE 34cf9 <_ZN6DataIO7readCSVERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERi+0x1139> | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.50              | N/A\nTEST %R11D,%R11D                                                                              | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.25              | scal (12.5%)\nJNE 340dd <_ZN6DataIO7readCSVERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERi+0x51d> | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.50              | N/A\nMOV %R13D,(%RBX)                                                                              | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 4       | 1                 | scal (12.5%)\nMOV 0x108(%RSP),%RBX                                                                          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0    | 0    | 0   | 3       | 0.50              | N/A\nMOV 0x110(%RSP),%R12                                                                          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0    | 0    | 0   | 3       | 0.50              | scal (25.0%)\nCMP %R12,%RBX                                                                                 | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.25              | scal (25.0%)\nJE 34120 <_ZN6DataIO7readCSVERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERi+0x560>  | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.50              | N/A\nVMOVSD 0xa0(%RSP),%XMM15                                                                      | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0    | 0    | 0   | 1       | 0.50              | scal (25.0%)\nADD $0x8,%RBX                                                                                 | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.25              | N/A\nVMOVSD %XMM15,-0x8(%RBX)                                                                      | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0   | 0    | 1    | 0   | 1       | 1                 | scal (25.0%)\nMOV %RBX,0x108(%RSP)                                                                          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 4       | 1                 | scal (25.0%)\nJMP 34060 <_ZN6DataIO7readCSVERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERi+0x4a0> | 6     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0       | 2                 | N/A\nMOV 0x100(%RSP),%RAX                                                                          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0    | 0    | 0   | 3       | 0.50              | N/A\nMOV $0xfffffffffffffff,%RCX                                                                   | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.25              | scal (25.0%)\nSUB %RAX,%RBX                                                                                 | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.25              | N/A\nMOV %RAX,0x80(%RSP)                                                                           | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 4       | 1                 | scal (25.0%)\nMOV %RBX,%R13                                                                                 | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0       | 0.25              | N/A\nSAR $0x3,%R13                                                                                 | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.25              | N/A\nCMP %RCX,%R13                                                                                 | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.25              | scal (25.0%)\nJE 34d77 <_ZN6DataIO7readCSVERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERi+0x11b7> | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.50              | N/A\nMOV 0x80(%RSP),%RDX                                                                           | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0    | 0    | 0   | 3       | 0.50              | scal (25.0%)\nCMP %RDX,%R12                                                                                 | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.25              | scal (25.0%)\nJE 34650 <_ZN6DataIO7readCSVERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERi+0xa90>  | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.50              | N/A\nLEA (%R13,%R13,1),%RSI                                                                        | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.25              | N/A\nCMP %R13,%RSI                                                                                 | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.25              | scal (25.0%)\nJB 34680 <_ZN6DataIO7readCSVERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERi+0xac0>  | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.50              | N/A\nXOR %R13D,%R13D                                                                               | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0       | 0.25              | N/A\nXOR %EDI,%EDI                                                                                 | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0       | 0.25              | N/A\nTEST %RSI,%RSI                                                                                | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.25              | scal (25.0%)\nJNE 34b9f <_ZN6DataIO7readCSVERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERi+0xfdf> | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.50              | N/A\nVMOVSD 0xa0(%RSP),%XMM12                                                                      | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0    | 0    | 0   | 1       | 0.50              | scal (25.0%)\nLEA 0x8(%RDI,%RBX,1),%R9                                                                      | 1     | 0         | 0    | 0.50 | 0.50      | 0.50 | 0.50 | 0    | 0   | 0    | 0    | 0   | 2       | 0.50              | N/A\nVMOVQ %RDI,%XMM13                                                                             | 1     | 0         | 0    | 1    | 0         | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 2       | 1                 | scal (25.0%)\nVPINSRQ $0x1,%R9,%XMM13,%XMM14                                                                | 1     | 0         | 0    | 1    | 0         | 0    | 0    | 0    | 0   | 0.50 | 0.50 | 0   | 3       | 1                 | scal (25.0%)\nVMOVSD %XMM12,(%RDI,%RBX,1)                                                                   | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0   | 0    | 1    | 0   | 1       | 1                 | scal (25.0%)\nTEST %RBX,%RBX                                                                                | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.25              | scal (25.0%)\nJG 34310 <_ZN6DataIO7readCSVERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERi+0x750>  | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.50              | N/A\nCMPQ $0,0x80(%RSP)                                                                            | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0.50 | 0.50 | 0    | 0   | 0    | 0    | 0   | 1       | 0.50              | scal (25.0%)\nJNE 34332 <_ZN6DataIO7readCSVERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERi+0x772> | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.50              | N/A\nVMOVDQA %XMM14,0x100(%RSP)                                                                    | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0   | 0    | 1    | 0   | 4       | 1                 | vect (50.0%)\nMOV %R13,0x110(%RSP)                                                                          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 4       | 1                 | scal (25.0%)\nJMP 34060 <_ZN6DataIO7readCSVERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERi+0x4a0> | 6     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0       | 2                 | N/A\nMOV 0x80(%RSP),%RSI                                                                           | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0    | 0    | 0   | 3       | 0.50              | N/A\nMOV %RBX,%RDX                                                                                 | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0       | 0.25              | scal (25.0%)\nVMOVDQA %XMM14,0xa0(%RSP)                                                                     | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0   | 0    | 1    | 0   | 4       | 1                 | vect (50.0%)\nCALL e170 <.plt.sec@start+0xec0>                                                              | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0   | 0    | 0    | 0   | 0       | 1                 | N/A\nVMOVDQA 0xa0(%RSP),%XMM14                                                                     | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0    | 0    | 0   | 3       | 0.50              | vect (50.0%)\nMOV 0x80(%RSP),%RDI                                                                           | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0    | 0    | 0   | 3       | 0.50              | N/A\nMOV %R12,%RSI                                                                                 | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0       | 0.25              | N/A\nVMOVDQA %XMM14,0xa0(%RSP)                                                                     | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0   | 0    | 1    | 0   | 4       | 1                 | vect (50.0%)\nSUB %RDI,%RSI                                                                                 | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.25              | N/A\nCALL dbb0 <.plt.sec@start+0x900>                                                              | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0   | 0    | 0    | 0   | 0       | 1                 | N/A\nVMOVDQA 0xa0(%RSP),%XMM14                                                                     | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0    | 0    | 0   | 3       | 0.50              | vect (50.0%)\nJMP 341b0 <_ZN6DataIO7readCSVERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERi+0x5f0> | 6     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0       | 2                 | N/A\nADD $0x1,%R13                                                                                 | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.25              | N/A\nJB 34680 <_ZN6DataIO7readCSVERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERi+0xac0>  | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.50              | N/A\nMOV $0xfffffffffffffff,%R8                                                                    | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.25              | N/A\nCMP %R8,%R13                                                                                  | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.25              | scal (25.0%)\nCMOVA %R8,%R13                                                                                | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.25              | N/A\nSAL $0x3,%R13                                                                                 | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.25              | N/A\nMOV %R13,%RDI                                                                                 | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0       | 0.25              | N/A\nCALL db90 <.plt.sec@start+0x8e0>                                                              | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0   | 0    | 0    | 0   | 0       | 1                 | N/A\nMOV %RAX,%RDI                                                                                 | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0       | 0.25              | N/A\nADD %RAX,%R13                                                                                 | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.25              | N/A\nJMP 3417a <_ZN6DataIO7readCSVERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERi+0x5ba> | 6     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0       | 2                 | N/A\nMOV $0x7ffffffffffffff8,%R13                                                                  | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.25              | N/A\nJMP 3466b <_ZN6DataIO7readCSVERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERi+0xaab> | 6     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0       | 2                 | N/A\nMOV $0xfffffffffffffff,%RDI                                                                   | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.25              | N/A\nCMP %RDI,%RSI                                                                                 | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.25              | N/A\nCMOVA %RDI,%RSI                                                                               | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.25              | N/A\nLEA (,%RSI,8),%R13                                                                            | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.25              | N/A\nJMP 3466b <_ZN6DataIO7readCSVERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERi+0xaab> | 6     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0       | 2                 | N/A\n"
              }
            ],
          "header":
            [
            "Warnings:\nDetected a function call instruction: ignoring called function instructions.\nRerun with --follow-calls=append to include them to analysis  or with --follow-calls=inline to simulate inlining.",
            "0% of peak computational performance is used (0.00 out of 48.00 FLOP per cycle (GFLOPS @ 1GHz))"
            ],
          "brief":
            [

            ],
          "gain":
            [
              {
                "workaround": " - Try to reorganize arrays of structures to structures of arrays\n - Consider to permute loops (see vectorization gain report)\n",
                "title": "Code clean check",
                "txt": "Detected a slowdown caused by scalar integer instructions (typically used for address computation).\nBy removing them, you can lower the cost of an iteration from 25.67 to 6.50 cycles (3.95x speedup)."
              },
              {
                "workaround": " - Try another compiler or update/tune your current one\n - Remove inter-iterations dependences from your loop and make it unit-stride:\n  * If your arrays have 2 or more dimensions, check whether elements are accessed contiguously and, otherwise, try to permute loops accordingly\n  * If your loop streams arrays of structures (AoS), try to use structures of arrays instead (SoA)\n",
                "details": "13% of SSE/AVX instructions are used in vector version (process two or more data elements in vector registers):\n - 18% of SSE/AVX loads are used in vector version.\n - 27% of SSE/AVX stores are used in vector version.\n - 0% of SSE/AVX instructions that are not load, store, addition, subtraction nor multiply instructions are used in vector version.\nSince your execution units are vector units, only a fully vectorized loop can use their full power.\n",
                "title": "Vectorization",
                "txt": "Your loop is not vectorized.\nOnly 25% of vector register length is used (average across all SSE/AVX instructions).\nBy fully vectorizing your loop, you can lower the cost of an iteration from 25.67 to 2.82 cycles (9.09x speedup)."
              },
              {
                "title": "Execution units bottlenecks",
                "txt": "Found no such bottlenecks but see expert reports for more complex bottlenecks."
              }
            ],
          "potential":
            [

            ]
        },
      "paths":
        [
          {
            "hint":
              [
                {
                  "details": "Calling (and then returning from) a function prevents many compiler optimizations (like vectorization), breaks control flow (which reduces pipeline performance) and executes extra instructions to save/restore the registers used inside it, which is very expensive (dozens of cycles). Consider to inline small functions.\n - unknown: 6 occurrences<<list_path_1_call_1>>\n",
                  "title": "CALL instructions",
                  "txt": "Detected function call instructions.\n"
                },
                {
                  "details": "These instructions generate more than one micro-operation and only one of them can be decoded during a cycle and the extra micro-operations increase pressure on execution units.\n - JMP: 6 occurrences<<list_path_1_complex_1>>\n",
                  "title": "Complex instructions",
                  "txt": "Detected COMPLEX INSTRUCTIONS.\n"
                },
                {
                  "title": "Type of elements and instruction set",
                  "txt": "No instructions are processing arithmetic or math operations on FP elements. This loop is probably writing/copying data or processing integer elements."
                },
                {
                  "title": "Matching between your loop (in the source code) and the binary loop",
                  "txt": "The binary loop does not contain any FP arithmetical operations.\nThe binary loop is loading 153 bytes.\nThe binary loop is storing 104 bytes."
                }
              ],
            "expert":
              [
                {
                  "title": "General properties",
                  "txt": "nb instructions    : 94\nnb uops            : 154\nloop length        : 507\nused x86 registers : 13\nused mmx registers : 0\nused xmm registers : 5\nused ymm registers : 0\nused zmm registers : 0\nnb stack references: 8\n"
                },
                {
                  "title": "Front-end",
                  "txt": "MACRO FUSION NOT POSSIBLE\nFIT IN UOP CACHE\nmicro-operation queue: 25.67 cycles\nfront end            : 25.67 cycles\n"
                },
                {
                  "title": "Back-end",
                  "txt": "       | ALU0/BRU0 | ALU1  | ALU2  | ALU3/BRU1 | AGU0  | AGU1  | AGU2  | FP0  | FP1  | FP2  | FP3\n--------------------------------------------------------------------------------------------------\nuops   | 18.75     | 18.75 | 18.75 | 18.75     | 13.00 | 13.00 | 11.00 | 0.00 | 1.00 | 6.00 | 0.00\ncycles | 18.75     | 18.75 | 18.75 | 18.75     | 13.00 | 13.00 | 11.00 | 0.00 | 1.00 | 6.00 | 0.00\n\nExecution ports to units layout:\n - ALU0/BRU0: ALU, BRU\n - ALU1: ALU\n - ALU2: ALU\n - ALU3/BRU1: ALU, BRU\n - AGU0 (256 bits): store address, load\n - AGU1 (256 bits): store address, load\n - AGU2: store address\n - FP0 (256 bits): VPU\n - FP1 (256 bits): VPU\n - FP2 (256 bits): VPU, FP store data\n - FP3 (256 bits): VPU, DIV/SQRT\n\nCycles executing div or sqrt instructions: NA\nCycles loading/storing data              : 11.00\n"
                },
                {
                  "title": "Cycles summary",
                  "txt": "Front-end : 25.67\nDispatch  : 18.75\nOverall L1: 25.67\n"
                },
                {
                  "title": "Vectorization ratios",
                  "txt": "INT\nall    : 16%\nload   : 22%\nstore  : 37%\nmul    : NA (no mul vectorizable/vectorized instructions)\nadd-sub: NA (no add-sub vectorizable/vectorized instructions)\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 0%\nFP\nall     : 0%\nload    : 0%\nstore   : 0%\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : NA (no other vectorizable/vectorized instructions)\nINT+FP\nall     : 13%\nload    : 18%\nstore   : 27%\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 0%\n"
                },
                {
                  "title": "Vector efficiency ratios",
                  "txt": "INT\nall    : 25%\nload   : 26%\nstore  : 31%\nmul    : NA (no mul vectorizable/vectorized instructions)\nadd-sub: NA (no add-sub vectorizable/vectorized instructions)\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 21%\nFP\nall     : 25%\nload    : 25%\nstore   : 25%\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : NA (no other vectorizable/vectorized instructions)\nINT+FP\nall     : 25%\nload    : 26%\nstore   : 29%\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 21%\n"
                },
                {
                  "title": "Cycles and memory resources usage",
                  "txt": "Assuming all data fit into the L1 cache, each iteration of the binary loop takes 25.67 cycles. At this rate:\n - 9% of peak load performance is reached (5.96 out of 64.00 bytes loaded per cycle (GB/s @ 1GHz))\n - 12% of peak store performance is reached (4.05 out of 32.00 bytes stored per cycle (GB/s @ 1GHz))\n"
                },
                {
                  "title": "Front-end bottlenecks",
                  "txt": "Performance is limited by instruction throughput (loading/decoding program instructions to execution core) (front-end is a bottleneck).\n\nBy removing all these bottlenecks, you can lower the cost of an iteration from 25.67 to 18.75 cycles (1.37x speedup).\n"
                },
                {
                  "title": "ASM code",
                  "txt": "In the binary file, the address of the loop is: 34060\n\nInstruction                                                                                   | Nb FU | ALU0/BRU0 | ALU1 | ALU2 | ALU3/BRU1 | AGU0 | AGU1 | AGU2 | FP0 | FP1  | FP2  | FP3 | Latency | Recip. throughput | Vectorization\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nMOV $0x2c,%EDX                                                                                | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.25              | scal (12.5%)\nMOV %R14,%RDI                                                                                 | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0       | 0.25              | N/A\nMOV 0x98(%RSP),%RSI                                                                           | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0    | 0    | 0   | 3       | 0.50              | N/A\nCALL e3b0 <.plt.sec@start+0x1100>                                                             | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0   | 0    | 0    | 0   | 0       | 1                 | N/A\nMOV (%RAX),%RSI                                                                               | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0    | 0    | 0   | 3       | 0.50              | N/A\nMOV -0x18(%RSI),%R8                                                                           | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0    | 0    | 0   | 3       | 0.50              | N/A\nTESTB $0x5,0x20(%RAX,%R8,1)                                                                   | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0.50 | 0.50 | 0    | 0   | 0    | 0    | 0   | 1       | 0.50              | scal (3.1%)\nJNE 341d0 <_ZN6DataIO7readCSVERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERi+0x610> | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.50              | N/A\nMOV 0x140(%RSP),%R12                                                                          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0    | 0    | 0   | 3       | 0.50              | scal (25.0%)\nCALL d2d0 <.plt.sec@start+0x20>                                                               | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0   | 0    | 0    | 0   | 0       | 1                 | N/A\nLEA 0xb8(%RSP),%RSI                                                                           | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.25              | N/A\nMOV (%RAX),%R13D                                                                              | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0    | 0    | 0   | 3       | 0.50              | N/A\nMOVL $0,(%RAX)                                                                                | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 4       | 1                 | scal (12.5%)\nMOV %RAX,%RBX                                                                                 | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0       | 0.25              | N/A\nMOV %R12,%RDI                                                                                 | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0       | 0.25              | N/A\nCALL d2a0 <.plt.got@start+0x10>                                                               | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0   | 0    | 0    | 0   | 0       | 1                 | N/A\nVMOVSD %XMM0,0xa0(%RSP)                                                                       | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0   | 0    | 1    | 0   | 1       | 1                 | scal (25.0%)\nCMP 0xb8(%RSP),%R12                                                                           | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0.50 | 0.50 | 0    | 0   | 0    | 0    | 0   | 1       | 0.50              | scal (25.0%)\nJE 34cd6 <_ZN6DataIO7readCSVERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERi+0x1116> | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.50              | N/A\nMOV (%RBX),%R11D                                                                              | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0    | 0    | 0   | 3       | 0.50              | scal (12.5%)\nCMP $0x22,%R11D                                                                               | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.25              | scal (12.5%)\nJE 34cf9 <_ZN6DataIO7readCSVERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERi+0x1139> | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.50              | N/A\nTEST %R11D,%R11D                                                                              | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.25              | scal (12.5%)\nJNE 340dd <_ZN6DataIO7readCSVERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERi+0x51d> | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.50              | N/A\nMOV %R13D,(%RBX)                                                                              | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 4       | 1                 | scal (12.5%)\nMOV 0x108(%RSP),%RBX                                                                          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0    | 0    | 0   | 3       | 0.50              | N/A\nMOV 0x110(%RSP),%R12                                                                          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0    | 0    | 0   | 3       | 0.50              | scal (25.0%)\nCMP %R12,%RBX                                                                                 | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.25              | scal (25.0%)\nJE 34120 <_ZN6DataIO7readCSVERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERi+0x560>  | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.50              | N/A\nVMOVSD 0xa0(%RSP),%XMM15                                                                      | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0    | 0    | 0   | 1       | 0.50              | scal (25.0%)\nADD $0x8,%RBX                                                                                 | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.25              | N/A\nVMOVSD %XMM15,-0x8(%RBX)                                                                      | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0   | 0    | 1    | 0   | 1       | 1                 | scal (25.0%)\nMOV %RBX,0x108(%RSP)                                                                          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 4       | 1                 | scal (25.0%)\nJMP 34060 <_ZN6DataIO7readCSVERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERi+0x4a0> | 6     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0       | 2                 | N/A\nMOV 0x100(%RSP),%RAX                                                                          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0    | 0    | 0   | 3       | 0.50              | N/A\nMOV $0xfffffffffffffff,%RCX                                                                   | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.25              | scal (25.0%)\nSUB %RAX,%RBX                                                                                 | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.25              | N/A\nMOV %RAX,0x80(%RSP)                                                                           | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 4       | 1                 | scal (25.0%)\nMOV %RBX,%R13                                                                                 | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0       | 0.25              | N/A\nSAR $0x3,%R13                                                                                 | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.25              | N/A\nCMP %RCX,%R13                                                                                 | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.25              | scal (25.0%)\nJE 34d77 <_ZN6DataIO7readCSVERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERi+0x11b7> | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.50              | N/A\nMOV 0x80(%RSP),%RDX                                                                           | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0    | 0    | 0   | 3       | 0.50              | scal (25.0%)\nCMP %RDX,%R12                                                                                 | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.25              | scal (25.0%)\nJE 34650 <_ZN6DataIO7readCSVERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERi+0xa90>  | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.50              | N/A\nLEA (%R13,%R13,1),%RSI                                                                        | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.25              | N/A\nCMP %R13,%RSI                                                                                 | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.25              | scal (25.0%)\nJB 34680 <_ZN6DataIO7readCSVERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERi+0xac0>  | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.50              | N/A\nXOR %R13D,%R13D                                                                               | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0       | 0.25              | N/A\nXOR %EDI,%EDI                                                                                 | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0       | 0.25              | N/A\nTEST %RSI,%RSI                                                                                | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.25              | scal (25.0%)\nJNE 34b9f <_ZN6DataIO7readCSVERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERi+0xfdf> | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.50              | N/A\nVMOVSD 0xa0(%RSP),%XMM12                                                                      | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0    | 0    | 0   | 1       | 0.50              | scal (25.0%)\nLEA 0x8(%RDI,%RBX,1),%R9                                                                      | 1     | 0         | 0    | 0.50 | 0.50      | 0.50 | 0.50 | 0    | 0   | 0    | 0    | 0   | 2       | 0.50              | N/A\nVMOVQ %RDI,%XMM13                                                                             | 1     | 0         | 0    | 1    | 0         | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 2       | 1                 | scal (25.0%)\nVPINSRQ $0x1,%R9,%XMM13,%XMM14                                                                | 1     | 0         | 0    | 1    | 0         | 0    | 0    | 0    | 0   | 0.50 | 0.50 | 0   | 3       | 1                 | scal (25.0%)\nVMOVSD %XMM12,(%RDI,%RBX,1)                                                                   | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0   | 0    | 1    | 0   | 1       | 1                 | scal (25.0%)\nTEST %RBX,%RBX                                                                                | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.25              | scal (25.0%)\nJG 34310 <_ZN6DataIO7readCSVERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERi+0x750>  | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.50              | N/A\nCMPQ $0,0x80(%RSP)                                                                            | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0.50 | 0.50 | 0    | 0   | 0    | 0    | 0   | 1       | 0.50              | scal (25.0%)\nJNE 34332 <_ZN6DataIO7readCSVERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERi+0x772> | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.50              | N/A\nVMOVDQA %XMM14,0x100(%RSP)                                                                    | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0   | 0    | 1    | 0   | 4       | 1                 | vect (50.0%)\nMOV %R13,0x110(%RSP)                                                                          | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 4       | 1                 | scal (25.0%)\nJMP 34060 <_ZN6DataIO7readCSVERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERi+0x4a0> | 6     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0       | 2                 | N/A\nMOV 0x80(%RSP),%RSI                                                                           | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0    | 0    | 0   | 3       | 0.50              | N/A\nMOV %RBX,%RDX                                                                                 | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0       | 0.25              | scal (25.0%)\nVMOVDQA %XMM14,0xa0(%RSP)                                                                     | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0   | 0    | 1    | 0   | 4       | 1                 | vect (50.0%)\nCALL e170 <.plt.sec@start+0xec0>                                                              | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0   | 0    | 0    | 0   | 0       | 1                 | N/A\nVMOVDQA 0xa0(%RSP),%XMM14                                                                     | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0    | 0    | 0   | 3       | 0.50              | vect (50.0%)\nMOV 0x80(%RSP),%RDI                                                                           | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0    | 0    | 0   | 3       | 0.50              | N/A\nMOV %R12,%RSI                                                                                 | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0       | 0.25              | N/A\nVMOVDQA %XMM14,0xa0(%RSP)                                                                     | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0   | 0    | 1    | 0   | 4       | 1                 | vect (50.0%)\nSUB %RDI,%RSI                                                                                 | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.25              | N/A\nCALL dbb0 <.plt.sec@start+0x900>                                                              | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0   | 0    | 0    | 0   | 0       | 1                 | N/A\nVMOVDQA 0xa0(%RSP),%XMM14                                                                     | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0   | 0    | 0    | 0   | 3       | 0.50              | vect (50.0%)\nJMP 341b0 <_ZN6DataIO7readCSVERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERi+0x5f0> | 6     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0       | 2                 | N/A\nADD $0x1,%R13                                                                                 | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.25              | N/A\nJB 34680 <_ZN6DataIO7readCSVERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERi+0xac0>  | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.50              | N/A\nMOV $0xfffffffffffffff,%R8                                                                    | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.25              | N/A\nCMP %R8,%R13                                                                                  | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.25              | scal (25.0%)\nCMOVA %R8,%R13                                                                                | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.25              | N/A\nSAL $0x3,%R13                                                                                 | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.25              | N/A\nMOV %R13,%RDI                                                                                 | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0       | 0.25              | N/A\nCALL db90 <.plt.sec@start+0x8e0>                                                              | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0   | 0    | 0    | 0   | 0       | 1                 | N/A\nMOV %RAX,%RDI                                                                                 | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0       | 0.25              | N/A\nADD %RAX,%R13                                                                                 | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.25              | N/A\nJMP 3417a <_ZN6DataIO7readCSVERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERi+0x5ba> | 6     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0       | 2                 | N/A\nMOV $0x7ffffffffffffff8,%R13                                                                  | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.25              | N/A\nJMP 3466b <_ZN6DataIO7readCSVERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERi+0xaab> | 6     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0       | 2                 | N/A\nMOV $0xfffffffffffffff,%RDI                                                                   | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.25              | N/A\nCMP %RDI,%RSI                                                                                 | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.25              | N/A\nCMOVA %RDI,%RSI                                                                               | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.25              | N/A\nLEA (,%RSI,8),%R13                                                                            | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 1       | 0.25              | N/A\nJMP 3466b <_ZN6DataIO7readCSVERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERi+0xaab> | 6     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0       | 2                 | N/A\n"
                }
              ],
            "header":
              [
              "Warnings:\nDetected a function call instruction: ignoring called function instructions.\nRerun with --follow-calls=append to include them to analysis  or with --follow-calls=inline to simulate inlining.",
              "0% of peak computational performance is used (0.00 out of 48.00 FLOP per cycle (GFLOPS @ 1GHz))"
              ],
            "brief":
              [

              ],
            "gain":
              [
                {
                  "workaround": " - Try to reorganize arrays of structures to structures of arrays\n - Consider to permute loops (see vectorization gain report)\n",
                  "title": "Code clean check",
                  "txt": "Detected a slowdown caused by scalar integer instructions (typically used for address computation).\nBy removing them, you can lower the cost of an iteration from 25.67 to 6.50 cycles (3.95x speedup)."
                },
                {
                  "workaround": " - Try another compiler or update/tune your current one\n - Remove inter-iterations dependences from your loop and make it unit-stride:\n  * If your arrays have 2 or more dimensions, check whether elements are accessed contiguously and, otherwise, try to permute loops accordingly\n  * If your loop streams arrays of structures (AoS), try to use structures of arrays instead (SoA)\n",
                  "details": "13% of SSE/AVX instructions are used in vector version (process two or more data elements in vector registers):\n - 18% of SSE/AVX loads are used in vector version.\n - 27% of SSE/AVX stores are used in vector version.\n - 0% of SSE/AVX instructions that are not load, store, addition, subtraction nor multiply instructions are used in vector version.\nSince your execution units are vector units, only a fully vectorized loop can use their full power.\n",
                  "title": "Vectorization",
                  "txt": "Your loop is not vectorized.\nOnly 25% of vector register length is used (average across all SSE/AVX instructions).\nBy fully vectorizing your loop, you can lower the cost of an iteration from 25.67 to 2.82 cycles (9.09x speedup)."
                },
                {
                  "title": "Execution units bottlenecks",
                  "txt": "Found no such bottlenecks but see expert reports for more complex bottlenecks."
                }
              ],
            "potential":
              [

              ]
          }
        ],
      "common":
        {
          "header":
            [
            "",
            "Warnings:\n - Ignoring paths for analysis\n - Too many paths. Rerun with max-paths=32\n - RecMII not computed since number of paths is unknown or > max_paths\n - Streams not analyzed since number of paths is unknown or > max_paths\n",
            "Try to simplify control and/or increase the maximum number of paths per function/loop through the 'max-paths-nb' option.\n",
            "This loop has 32 execution paths.\n",
            "The presence of multiple execution paths is typically the main/first bottleneck.\nTry to simplify control inside loop: ideally, try to remove all conditional expressions, for example by (if applicable):\n - hoisting them (moving them outside the loop)\n - turning them into conditional moves, MIN or MAX\n\n"
            ],
          "nb_paths": 32
        }
    }
}
