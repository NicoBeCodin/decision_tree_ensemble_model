{
  "_cqa_text_report":
    {
      "_objects":
        {
          "image_col_maj":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/col_maj.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_4x32_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/4x32_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x64_128":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x64_128.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_4x32_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/4x32_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_8x32_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/8x32_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x32_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x32_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_4x64_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/4x64_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x64_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x64_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_vec_align":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/vec_align.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x64_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x64_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x32_128":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x32_128.svg",
              "size":
                {
                  "x": 500
                }
            },
          "list_path_1_complex_1":
            {
              "dynamic": true,
              "initial": "closed",
              "type": "list",
              "lines":
                [

                ],
              "header": ""
            },
          "list_path_1_vec_align_1":
            {
              "dynamic": true,
              "initial": "closed",
              "type": "list",
              "lines":
                [

                ],
              "header": ""
            },
          "image_2x64_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/2x64_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_row_maj":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/row_maj.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x32_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x32_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_2x64_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/2x64_512.svg",
              "size":
                {
                  "x": 500
                }
            }
        },
      "AVG":
        {
          "hint":
            [
              {
                "details": "These instructions generate more than one micro-operation and only one of them can be decoded during a cycle and the extra micro-operations increase pressure on execution units.\n - VPERMD: 6 occurrences<<list_path_1_complex_1>>\n",
                "title": "Complex instructions",
                "txt": "Detected COMPLEX INSTRUCTIONS.\n"
              },
              {
                "workaround": " - Try to reorganize arrays of structures to structures of arrays\n - Consider to permute loops (see vectorization gain report)\n - Try to remove indirect accesses. If applicable, precompute elements out of the innermost loop.\n",
                "details": " - Constant non-unit stride: 2 occurrence(s)\n - Irregular (variable stride) or indirect: 1 occurrence(s)\nNon-unit stride (uncontiguous) accesses are not efficiently using data caches\n",
                "title": "Slow data structures access",
                "txt": "Detected data structures (typically arrays) that cannot be efficiently read/written"
              },
              {
                "workaround": " - Pass to your compiler a micro-architecture specialization option:\n  * Please look into your compiler manual for march=native or equivalent\n - Use vector aligned instructions:\n  1) align your arrays on 32 bytes boundaries\n  2) inform your compiler that your arrays are vector aligned: read your compiler manual.\n<<image_vec_align>>",
                "details": " - VINSERTF128: 2 occurrences<<list_path_1_vec_align_1>>\n",
                "title": "Vector unaligned load/store instructions",
                "txt": "Detected 2 suboptimal vector unaligned load/store instructions.\n"
              },
              {
                "title": "Type of elements and instruction set",
                "txt": "5 AVX instructions are processing arithmetic or math operations on double precision FP elements in vector mode (four at a time).\n"
              },
              {
                "title": "Matching between your loop (in the source code) and the binary loop",
                "txt": "The binary loop is composed of 24 FP arithmetical operations:\n - 16: addition or subtraction (4 inside FMA instructions)\n - 8: multiply (4 inside FMA instructions)\nThe binary loop is loading 192 bytes (24 double precision FP elements)."
              },
              {
                "title": "Arithmetic intensity",
                "txt": "Arithmetic intensity is 0.12 FP operations per loaded or stored byte."
              }
            ],
          "expert":
            [
              {
                "title": "General properties",
                "txt": "nb instructions    : 39\nnb uops            : 44\nloop length        : 211\nused x86 registers : 7\nused mmx registers : 0\nused xmm registers : 10\nused ymm registers : 14\nused zmm registers : 0\nnb stack references: 0\nADD-SUB / MUL ratio: 3.00\n"
              },
              {
                "title": "Front-end",
                "txt": "ASSUMED MACRO FUSION\nFIT IN UOP CACHE\nmicro-operation queue: 7.33 cycles\nfront end            : 7.33 cycles\n"
              },
              {
                "title": "Back-end",
                "txt": "       | ALU0/BRU0 | ALU1 | ALU2 | ALU3/BRU1 | AGU0 | AGU1 | AGU2 | FP0  | FP1  | FP2  | FP3\n---------------------------------------------------------------------------------------------\nuops   | 0.50      | 0.50 | 0.50 | 0.50      | 6.00 | 6.00 | 4.00 | 9.67 | 9.33 | 9.33 | 9.67\ncycles | 0.50      | 0.50 | 0.50 | 0.50      | 6.00 | 6.00 | 4.00 | 9.67 | 9.33 | 9.33 | 9.67\n\nExecution ports to units layout:\n - ALU0/BRU0: ALU, BRU\n - ALU1: ALU\n - ALU2: ALU\n - ALU3/BRU1: ALU, BRU\n - AGU0 (256 bits): store address, load\n - AGU1 (256 bits): store address, load\n - AGU2: store address\n - FP0 (256 bits): VPU\n - FP1 (256 bits): VPU\n - FP2 (256 bits): VPU, FP store data\n - FP3 (256 bits): VPU, DIV/SQRT\n\nCycles executing div or sqrt instructions: NA\nCycles loading/storing data              : 6.00\nLongest recurrence chain latency (RecMII): 3.00\n"
              },
              {
                "title": "Cycles summary",
                "txt": "Front-end : 7.33\nDispatch  : 9.67\nData deps.: 3.00\nOverall L1: 9.67\n"
              },
              {
                "title": "Vectorization ratios",
                "txt": "INT\nall    : 61%\nload   : 100%\nstore  : NA (no store vectorizable/vectorized instructions)\nmul    : NA (no mul vectorizable/vectorized instructions)\nadd-sub: NA (no add-sub vectorizable/vectorized instructions)\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 61%\nFP\nall     : 46%\nload    : 0%\nstore   : NA (no store vectorizable/vectorized instructions)\nmul     : 100%\nadd-sub : 100%\nfma     : 100%\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 100%\nINT+FP\nall     : 55%\nload    : 33%\nstore   : NA (no store vectorizable/vectorized instructions)\nmul     : 100%\nadd-sub : 100%\nfma     : 100%\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 65%\n"
              },
              {
                "title": "Vector efficiency ratios",
                "txt": "INT\nall    : 59%\nload   : 100%\nstore  : NA (no store vectorizable/vectorized instructions)\nmul    : NA (no mul vectorizable/vectorized instructions)\nadd-sub: NA (no add-sub vectorizable/vectorized instructions)\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 59%\nFP\nall     : 53%\nload    : 25%\nstore   : NA (no store vectorizable/vectorized instructions)\nmul     : 100%\nadd-sub : 100%\nfma     : 100%\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 50%\nINT+FP\nall     : 56%\nload    : 50%\nstore   : NA (no store vectorizable/vectorized instructions)\nmul     : 100%\nadd-sub : 100%\nfma     : 100%\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 58%\n"
              },
              {
                "title": "Cycles and memory resources usage",
                "txt": "Assuming all data fit into the L1 cache, each iteration of the binary loop takes 9.67 cycles. At this rate:\n - 31% of peak load performance is reached (19.86 out of 64.00 bytes loaded per cycle (GB/s @ 1GHz))\n"
              },
              {
                "title": "Front-end bottlenecks",
                "txt": "Found no such bottlenecks."
              },
              {
                "title": "ASM code",
                "txt": "In the binary file, the address of the loop is: 78290\n\nInstruction                                                                                                 | Nb FU | ALU0/BRU0 | ALU1 | ALU2 | ALU3/BRU1 | AGU0 | AGU1 | AGU2 | FP0  | FP1  | FP2  | FP3  | Latency | Recip. throughput | Vectorization\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nVPERMD 0x8(%RDX),%YMM9,%YMM11                                                                               | 2     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0.33 | 0.33 | 0.33 | 0    | 3       | 2                 | vect (100.0%)\nVPERMD 0x28(%RDX),%YMM10,%YMM12                                                                             | 2     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0.33 | 0.33 | 0.33 | 0    | 3       | 2                 | vect (100.0%)\nSUB $-0x80,%RDX                                                                                             | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25              | N/A\nVPERMD -0x38(%RDX),%YMM9,%YMM14                                                                             | 2     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0.33 | 0.33 | 0.33 | 0    | 3       | 2                 | vect (100.0%)\nVPERMD -0x18(%RDX),%YMM10,%YMM15                                                                            | 2     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0.33 | 0.33 | 0.33 | 0    | 3       | 2                 | vect (100.0%)\nVPBLENDD $-0x10,%YMM12,%YMM11,%YMM13                                                                        | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0.33 | 0.33 | 0    | 0.33 | 1       | 0.33              | vect (100.0%)\nVPBLENDD $-0x10,%YMM15,%YMM14,%YMM0                                                                         | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0.33 | 0.33 | 0    | 0.33 | 1       | 0.33              | vect (100.0%)\nVPERMD %YMM13,%YMM9,%YMM1                                                                                   | 2     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0.67 | 0.67 | 0.67 | 0    | 3       | 2                 | vect (100.0%)\nVPERMD %YMM0,%YMM10,%YMM5                                                                                   | 2     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0.67 | 0.67 | 0.67 | 0    | 3       | 2                 | vect (100.0%)\nVPMOVSXDQ %XMM1,%YMM6                                                                                       | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0    | 1       | 0.50              | vect (50.0%)\nVEXTRACTI128 $0x1,%YMM5,%XMM4                                                                               | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0.33 | 0.33 | 0    | 0.33 | 1       | 0.33              | vect (50.0%)\nVEXTRACTI128 $0x1,%YMM6,%XMM12                                                                              | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0.33 | 0.33 | 0    | 0.33 | 1       | 0.33              | vect (50.0%)\nVMOVQ %XMM6,%R11                                                                                            | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1    | 0    | 1       | 1                 | scal (25.0%)\nVPMOVSXDQ %XMM4,%YMM8                                                                                       | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0    | 1       | 0.50              | vect (50.0%)\nVPEXTRQ $0x1,%XMM6,%RCX                                                                                     | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0.50 | 1.50 | 0    | 2       | 1                 | scal (25.0%)\nVMOVQ %XMM12,%RBX                                                                                           | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1    | 0    | 1       | 1                 | scal (25.0%)\nVMOVSD (%RAX,%R11,8),%XMM15                                                                                 | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | scal (25.0%)\nVEXTRACTI128 $0x1,%YMM8,%XMM6                                                                               | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0.33 | 0.33 | 0    | 0.33 | 1       | 0.33              | vect (50.0%)\nVMOVSD (%RAX,%RBX,8),%XMM13                                                                                 | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | scal (25.0%)\nVPEXTRQ $0x1,%XMM12,%R10                                                                                    | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0.50 | 1.50 | 0    | 2       | 1                 | scal (25.0%)\nVMOVQ %XMM8,%R11                                                                                            | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1    | 0    | 1       | 1                 | scal (25.0%)\nVMOVQ %XMM6,%RBX                                                                                            | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1    | 0    | 1       | 1                 | scal (25.0%)\nVMOVSD (%RAX,%R11,8),%XMM11                                                                                 | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | scal (25.0%)\nVMOVSD (%RAX,%RBX,8),%XMM4                                                                                  | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | scal (25.0%)\nVMOVHPD (%RAX,%RCX,8),%XMM15,%XMM0                                                                          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0.50 | 0.50 | 0    | 1       | 0.50              | scal (25.0%)\nVPEXTRQ $0x1,%XMM8,%RCX                                                                                     | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0.50 | 1.50 | 0    | 2       | 1                 | scal (25.0%)\nVMOVHPD (%RAX,%R10,8),%XMM13,%XMM14                                                                         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0.50 | 0.50 | 0    | 1       | 0.50              | scal (25.0%)\nVPEXTRQ $0x1,%XMM6,%R10                                                                                     | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0.50 | 1.50 | 0    | 2       | 1                 | scal (25.0%)\nVMOVHPD (%RAX,%RCX,8),%XMM11,%XMM12                                                                         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0.50 | 0.50 | 0    | 1       | 0.50              | scal (25.0%)\nVINSERTF128 $0x1,%XMM14,%YMM0,%YMM1                                                                         | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0.33 | 0.33 | 0    | 0.33 | 2       | 0.33              | vect (50.0%)\nVMOVHPD (%RAX,%R10,8),%XMM4,%XMM8                                                                           | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0.50 | 0.50 | 0    | 1       | 0.50              | scal (25.0%)\nVINSERTF128 $0x1,%XMM8,%YMM12,%YMM13                                                                        | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0.33 | 0.33 | 0    | 0.33 | 2       | 0.33              | vect (50.0%)\nVMULPD %YMM13,%YMM13,%YMM15                                                                                 | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 3       | 0.50              | vect (100.0%)\nVADDPD %YMM13,%YMM1,%YMM14                                                                                  | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 3       | 0.50              | vect (100.0%)\nVFMADD132PD %YMM1,%YMM15,%YMM1                                                                              | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 5       | 0.50              | vect (100.0%)\nVADDPD %YMM14,%YMM2,%YMM2                                                                                   | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 3       | 0.50              | vect (100.0%)\nVADDPD %YMM1,%YMM3,%YMM3                                                                                    | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 3       | 0.50              | vect (100.0%)\nCMP %RDX,%R8                                                                                                | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25              | N/A\nJNE 78290 <_ZN18DecisionTreeSingle16findBestSplitOMPERKSt6vectorIdSaIdEEiS4_RKS0_IiSaIiEEd._omp_fn.0+0x240> | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | N/A\n"
              }
            ],
          "header":
            [
            "10% of peak computational performance is used (2.48 out of 24.00 FLOP per cycle (GFLOPS @ 1GHz))"
            ],
          "brief":
            [

            ],
          "gain":
            [
              {
                "workaround": " - Try another compiler or update/tune your current one\n - Remove inter-iterations dependences from your loop and make it unit-stride:\n  * If your arrays have 2 or more dimensions, check whether elements are accessed contiguously and, otherwise, try to permute loops accordingly\n  * If your loop streams arrays of structures (AoS), try to use structures of arrays instead (SoA)\n",
                "details": "55% of SSE/AVX instructions are used in vector version (process two or more data elements in vector registers):\n - 33% of SSE/AVX loads are used in vector version.\n - 65% of SSE/AVX instructions that are not load, store, addition, subtraction nor multiply instructions are used in vector version.\nSince your execution units are vector units, only a fully vectorized loop can use their full power.\n",
                "title": "Vectorization",
                "txt": "Your loop is partially vectorized.\nOnly 56% of vector register length is used (average across all SSE/AVX instructions).\nBy fully vectorizing your loop, you can lower the cost of an iteration from 9.67 to 6.83 cycles (1.41x speedup)."
              },
              {
                "workaround": " - Reduce the number of FP add instructions\n - Reduce the number of FP multiply/FMA instructions\n",
                "title": "Execution units bottlenecks",
                "txt": "Performance is limited by:\n - execution of FP add operations (the FP add unit is a bottleneck)\n - execution of FP multiply or FMA (fused multiply-add) operations (the FP multiply/FMA unit is a bottleneck)\n"
              }
            ],
          "potential":
            [
              {
                "workaround": "Try to change order in which elements are evaluated (using parentheses) in arithmetic expressions containing both ADD/SUB and MUL operations to enable your compiler to generate FMA instructions wherever possible.\nFor instance a + b*c is a valid FMA (MUL then ADD).\nHowever (a+b)* c cannot be translated into an FMA (ADD then MUL).",
                "title": "FMA",
                "txt": "Detected 4 FMA (fused multiply-add) operations.\nPresence of both ADD/SUB and MUL operations."
              }
            ]
        },
      "paths":
        [
          {
            "hint":
              [
                {
                  "details": "These instructions generate more than one micro-operation and only one of them can be decoded during a cycle and the extra micro-operations increase pressure on execution units.\n - VPERMD: 6 occurrences<<list_path_1_complex_1>>\n",
                  "title": "Complex instructions",
                  "txt": "Detected COMPLEX INSTRUCTIONS.\n"
                },
                {
                  "workaround": " - Try to reorganize arrays of structures to structures of arrays\n - Consider to permute loops (see vectorization gain report)\n - Try to remove indirect accesses. If applicable, precompute elements out of the innermost loop.\n",
                  "details": " - Constant non-unit stride: 2 occurrence(s)\n - Irregular (variable stride) or indirect: 1 occurrence(s)\nNon-unit stride (uncontiguous) accesses are not efficiently using data caches\n",
                  "title": "Slow data structures access",
                  "txt": "Detected data structures (typically arrays) that cannot be efficiently read/written"
                },
                {
                  "workaround": " - Pass to your compiler a micro-architecture specialization option:\n  * Please look into your compiler manual for march=native or equivalent\n - Use vector aligned instructions:\n  1) align your arrays on 32 bytes boundaries\n  2) inform your compiler that your arrays are vector aligned: read your compiler manual.\n<<image_vec_align>>",
                  "details": " - VINSERTF128: 2 occurrences<<list_path_1_vec_align_1>>\n",
                  "title": "Vector unaligned load/store instructions",
                  "txt": "Detected 2 suboptimal vector unaligned load/store instructions.\n"
                },
                {
                  "title": "Type of elements and instruction set",
                  "txt": "5 AVX instructions are processing arithmetic or math operations on double precision FP elements in vector mode (four at a time).\n"
                },
                {
                  "title": "Matching between your loop (in the source code) and the binary loop",
                  "txt": "The binary loop is composed of 24 FP arithmetical operations:\n - 16: addition or subtraction (4 inside FMA instructions)\n - 8: multiply (4 inside FMA instructions)\nThe binary loop is loading 192 bytes (24 double precision FP elements)."
                },
                {
                  "title": "Arithmetic intensity",
                  "txt": "Arithmetic intensity is 0.12 FP operations per loaded or stored byte."
                }
              ],
            "expert":
              [
                {
                  "title": "General properties",
                  "txt": "nb instructions    : 39\nnb uops            : 44\nloop length        : 211\nused x86 registers : 7\nused mmx registers : 0\nused xmm registers : 10\nused ymm registers : 14\nused zmm registers : 0\nnb stack references: 0\nADD-SUB / MUL ratio: 3.00\n"
                },
                {
                  "title": "Front-end",
                  "txt": "ASSUMED MACRO FUSION\nFIT IN UOP CACHE\nmicro-operation queue: 7.33 cycles\nfront end            : 7.33 cycles\n"
                },
                {
                  "title": "Back-end",
                  "txt": "       | ALU0/BRU0 | ALU1 | ALU2 | ALU3/BRU1 | AGU0 | AGU1 | AGU2 | FP0  | FP1  | FP2  | FP3\n---------------------------------------------------------------------------------------------\nuops   | 0.50      | 0.50 | 0.50 | 0.50      | 6.00 | 6.00 | 4.00 | 9.67 | 9.33 | 9.33 | 9.67\ncycles | 0.50      | 0.50 | 0.50 | 0.50      | 6.00 | 6.00 | 4.00 | 9.67 | 9.33 | 9.33 | 9.67\n\nExecution ports to units layout:\n - ALU0/BRU0: ALU, BRU\n - ALU1: ALU\n - ALU2: ALU\n - ALU3/BRU1: ALU, BRU\n - AGU0 (256 bits): store address, load\n - AGU1 (256 bits): store address, load\n - AGU2: store address\n - FP0 (256 bits): VPU\n - FP1 (256 bits): VPU\n - FP2 (256 bits): VPU, FP store data\n - FP3 (256 bits): VPU, DIV/SQRT\n\nCycles executing div or sqrt instructions: NA\nCycles loading/storing data              : 6.00\nLongest recurrence chain latency (RecMII): 3.00\n"
                },
                {
                  "title": "Cycles summary",
                  "txt": "Front-end : 7.33\nDispatch  : 9.67\nData deps.: 3.00\nOverall L1: 9.67\n"
                },
                {
                  "title": "Vectorization ratios",
                  "txt": "INT\nall    : 61%\nload   : 100%\nstore  : NA (no store vectorizable/vectorized instructions)\nmul    : NA (no mul vectorizable/vectorized instructions)\nadd-sub: NA (no add-sub vectorizable/vectorized instructions)\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 61%\nFP\nall     : 46%\nload    : 0%\nstore   : NA (no store vectorizable/vectorized instructions)\nmul     : 100%\nadd-sub : 100%\nfma     : 100%\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 100%\nINT+FP\nall     : 55%\nload    : 33%\nstore   : NA (no store vectorizable/vectorized instructions)\nmul     : 100%\nadd-sub : 100%\nfma     : 100%\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 65%\n"
                },
                {
                  "title": "Vector efficiency ratios",
                  "txt": "INT\nall    : 59%\nload   : 100%\nstore  : NA (no store vectorizable/vectorized instructions)\nmul    : NA (no mul vectorizable/vectorized instructions)\nadd-sub: NA (no add-sub vectorizable/vectorized instructions)\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 59%\nFP\nall     : 53%\nload    : 25%\nstore   : NA (no store vectorizable/vectorized instructions)\nmul     : 100%\nadd-sub : 100%\nfma     : 100%\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 50%\nINT+FP\nall     : 56%\nload    : 50%\nstore   : NA (no store vectorizable/vectorized instructions)\nmul     : 100%\nadd-sub : 100%\nfma     : 100%\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 58%\n"
                },
                {
                  "title": "Cycles and memory resources usage",
                  "txt": "Assuming all data fit into the L1 cache, each iteration of the binary loop takes 9.67 cycles. At this rate:\n - 31% of peak load performance is reached (19.86 out of 64.00 bytes loaded per cycle (GB/s @ 1GHz))\n"
                },
                {
                  "title": "Front-end bottlenecks",
                  "txt": "Found no such bottlenecks."
                },
                {
                  "title": "ASM code",
                  "txt": "In the binary file, the address of the loop is: 78290\n\nInstruction                                                                                                 | Nb FU | ALU0/BRU0 | ALU1 | ALU2 | ALU3/BRU1 | AGU0 | AGU1 | AGU2 | FP0  | FP1  | FP2  | FP3  | Latency | Recip. throughput | Vectorization\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nVPERMD 0x8(%RDX),%YMM9,%YMM11                                                                               | 2     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0.33 | 0.33 | 0.33 | 0    | 3       | 2                 | vect (100.0%)\nVPERMD 0x28(%RDX),%YMM10,%YMM12                                                                             | 2     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0.33 | 0.33 | 0.33 | 0    | 3       | 2                 | vect (100.0%)\nSUB $-0x80,%RDX                                                                                             | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25              | N/A\nVPERMD -0x38(%RDX),%YMM9,%YMM14                                                                             | 2     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0.33 | 0.33 | 0.33 | 0    | 3       | 2                 | vect (100.0%)\nVPERMD -0x18(%RDX),%YMM10,%YMM15                                                                            | 2     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0.33 | 0.33 | 0.33 | 0    | 3       | 2                 | vect (100.0%)\nVPBLENDD $-0x10,%YMM12,%YMM11,%YMM13                                                                        | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0.33 | 0.33 | 0    | 0.33 | 1       | 0.33              | vect (100.0%)\nVPBLENDD $-0x10,%YMM15,%YMM14,%YMM0                                                                         | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0.33 | 0.33 | 0    | 0.33 | 1       | 0.33              | vect (100.0%)\nVPERMD %YMM13,%YMM9,%YMM1                                                                                   | 2     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0.67 | 0.67 | 0.67 | 0    | 3       | 2                 | vect (100.0%)\nVPERMD %YMM0,%YMM10,%YMM5                                                                                   | 2     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0.67 | 0.67 | 0.67 | 0    | 3       | 2                 | vect (100.0%)\nVPMOVSXDQ %XMM1,%YMM6                                                                                       | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0    | 1       | 0.50              | vect (50.0%)\nVEXTRACTI128 $0x1,%YMM5,%XMM4                                                                               | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0.33 | 0.33 | 0    | 0.33 | 1       | 0.33              | vect (50.0%)\nVEXTRACTI128 $0x1,%YMM6,%XMM12                                                                              | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0.33 | 0.33 | 0    | 0.33 | 1       | 0.33              | vect (50.0%)\nVMOVQ %XMM6,%R11                                                                                            | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1    | 0    | 1       | 1                 | scal (25.0%)\nVPMOVSXDQ %XMM4,%YMM8                                                                                       | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0    | 1       | 0.50              | vect (50.0%)\nVPEXTRQ $0x1,%XMM6,%RCX                                                                                     | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0.50 | 1.50 | 0    | 2       | 1                 | scal (25.0%)\nVMOVQ %XMM12,%RBX                                                                                           | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1    | 0    | 1       | 1                 | scal (25.0%)\nVMOVSD (%RAX,%R11,8),%XMM15                                                                                 | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | scal (25.0%)\nVEXTRACTI128 $0x1,%YMM8,%XMM6                                                                               | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0.33 | 0.33 | 0    | 0.33 | 1       | 0.33              | vect (50.0%)\nVMOVSD (%RAX,%RBX,8),%XMM13                                                                                 | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | scal (25.0%)\nVPEXTRQ $0x1,%XMM12,%R10                                                                                    | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0.50 | 1.50 | 0    | 2       | 1                 | scal (25.0%)\nVMOVQ %XMM8,%R11                                                                                            | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1    | 0    | 1       | 1                 | scal (25.0%)\nVMOVQ %XMM6,%RBX                                                                                            | 1     | 0         | 0    | 0    | 0         | 0.33 | 0.33 | 0.33 | 0    | 0    | 1    | 0    | 1       | 1                 | scal (25.0%)\nVMOVSD (%RAX,%R11,8),%XMM11                                                                                 | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | scal (25.0%)\nVMOVSD (%RAX,%RBX,8),%XMM4                                                                                  | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | scal (25.0%)\nVMOVHPD (%RAX,%RCX,8),%XMM15,%XMM0                                                                          | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0.50 | 0.50 | 0    | 1       | 0.50              | scal (25.0%)\nVPEXTRQ $0x1,%XMM8,%RCX                                                                                     | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0.50 | 1.50 | 0    | 2       | 1                 | scal (25.0%)\nVMOVHPD (%RAX,%R10,8),%XMM13,%XMM14                                                                         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0.50 | 0.50 | 0    | 1       | 0.50              | scal (25.0%)\nVPEXTRQ $0x1,%XMM6,%R10                                                                                     | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0.50 | 1.50 | 0    | 2       | 1                 | scal (25.0%)\nVMOVHPD (%RAX,%RCX,8),%XMM11,%XMM12                                                                         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0.50 | 0.50 | 0    | 1       | 0.50              | scal (25.0%)\nVINSERTF128 $0x1,%XMM14,%YMM0,%YMM1                                                                         | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0.33 | 0.33 | 0    | 0.33 | 2       | 0.33              | vect (50.0%)\nVMOVHPD (%RAX,%R10,8),%XMM4,%XMM8                                                                           | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0.50 | 0.50 | 0    | 1       | 0.50              | scal (25.0%)\nVINSERTF128 $0x1,%XMM8,%YMM12,%YMM13                                                                        | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0.33 | 0.33 | 0    | 0.33 | 2       | 0.33              | vect (50.0%)\nVMULPD %YMM13,%YMM13,%YMM15                                                                                 | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 3       | 0.50              | vect (100.0%)\nVADDPD %YMM13,%YMM1,%YMM14                                                                                  | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 3       | 0.50              | vect (100.0%)\nVFMADD132PD %YMM1,%YMM15,%YMM1                                                                              | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 5       | 0.50              | vect (100.0%)\nVADDPD %YMM14,%YMM2,%YMM2                                                                                   | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 3       | 0.50              | vect (100.0%)\nVADDPD %YMM1,%YMM3,%YMM3                                                                                    | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 3       | 0.50              | vect (100.0%)\nCMP %RDX,%R8                                                                                                | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25              | N/A\nJNE 78290 <_ZN18DecisionTreeSingle16findBestSplitOMPERKSt6vectorIdSaIdEEiS4_RKS0_IiSaIiEEd._omp_fn.0+0x240> | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | N/A\n"
                }
              ],
            "header":
              [
              "10% of peak computational performance is used (2.48 out of 24.00 FLOP per cycle (GFLOPS @ 1GHz))"
              ],
            "brief":
              [

              ],
            "gain":
              [
                {
                  "workaround": " - Try another compiler or update/tune your current one\n - Remove inter-iterations dependences from your loop and make it unit-stride:\n  * If your arrays have 2 or more dimensions, check whether elements are accessed contiguously and, otherwise, try to permute loops accordingly\n  * If your loop streams arrays of structures (AoS), try to use structures of arrays instead (SoA)\n",
                  "details": "55% of SSE/AVX instructions are used in vector version (process two or more data elements in vector registers):\n - 33% of SSE/AVX loads are used in vector version.\n - 65% of SSE/AVX instructions that are not load, store, addition, subtraction nor multiply instructions are used in vector version.\nSince your execution units are vector units, only a fully vectorized loop can use their full power.\n",
                  "title": "Vectorization",
                  "txt": "Your loop is partially vectorized.\nOnly 56% of vector register length is used (average across all SSE/AVX instructions).\nBy fully vectorizing your loop, you can lower the cost of an iteration from 9.67 to 6.83 cycles (1.41x speedup)."
                },
                {
                  "workaround": " - Reduce the number of FP add instructions\n - Reduce the number of FP multiply/FMA instructions\n",
                  "title": "Execution units bottlenecks",
                  "txt": "Performance is limited by:\n - execution of FP add operations (the FP add unit is a bottleneck)\n - execution of FP multiply or FMA (fused multiply-add) operations (the FP multiply/FMA unit is a bottleneck)\n"
                }
              ],
            "potential":
              [
                {
                  "workaround": "Try to change order in which elements are evaluated (using parentheses) in arithmetic expressions containing both ADD/SUB and MUL operations to enable your compiler to generate FMA instructions wherever possible.\nFor instance a + b*c is a valid FMA (MUL then ADD).\nHowever (a+b)* c cannot be translated into an FMA (ADD then MUL).",
                  "title": "FMA",
                  "txt": "Detected 4 FMA (fused multiply-add) operations.\nPresence of both ADD/SUB and MUL operations."
                }
              ]
          }
        ],
      "common":
        {
          "header":
            [
            ""
            ],
          "nb_paths": 1
        }
    }
}
